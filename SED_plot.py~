import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from decimal import Decimal
import prospect.io.read_results as pread
import sys, os
import sedpy
from glob import glob
import pandas as pd
import numpy as np
from prospect.sources import FastStepBasis


gal = int(sys.argv[1])
#gal_list = sys.argv[1]


def load_obs(sed_file):

    from hyperion.model import ModelOutput
    from astropy.cosmology import Planck15
    from astropy import units as u
    from astropy import constants
    m = ModelOutput(sed_file)

    wav,flux = m.get_sed(inclination='all',aperture=-1)
    wav  = np.asarray(wav)*u.micron #wav is in micron  
    wav = wav.to(u.AA)
    #wav *= (1.+0.01)
    flux = np.asarray(flux)*u.erg/u.s
    dl = 10.0*u.pc
    #dl = Planck15.luminosity_distance(0.01)
    dl = dl.to(u.cm)
    flux /= (4.*3.14*dl**2.)
    nu = constants.c.cgs/(wav.to(u.cm))
    nu = nu.to(u.Hz)

    flux /= nu
    flux = flux.to(u.Jy)
    maggies = flux[0] / 3631.

    return maggies.value, wav



def get_best(res, **kwargs):
    """Get the maximum a posteriori parameters.                                                                               
    From prospect.utils.plotting                                                                                              
    """
    imax = np.argmax(res['lnprobability'])
    # there must be a more elegant way to deal with differnt shapes                                                           
    try:
        i, j = np.unravel_index(imax, res['lnprobability'].shape)
        theta_best = res['chain'][i, j, :].copy()
    except(ValueError):
        theta_best = res['chain'][imax, :].copy()

    theta_names = res.get('theta_labels', res['model'].theta_labels())
    return theta_names, theta_best


#ultra = '/ufrc/narayanan/s.lower/simSEDs/simbam25n512_newfof/snap305_ultra/trial/snap305.galaxy'+'{0:03}'.format(gal)+'*.h5'
#tau_model = '/ufrc/narayanan/s.lower/simSEDs/simbam25n512_newfof/snap305_parametricSFH/tau/snap305.galaxy'+'{0:03}'.format(gal)+'*.h5'
#burst_model = '/ufrc/narayanan/s.lower/simSEDs/simbam25n512_newfof/snap305_parametricSFH/burst/snap305.galaxy'+'{0:03}'.format(gal)+'*_mcmc.h5'
#cont_model = '/ufrc/narayanan/s.lower/simSEDs/simbam25n512_newfof/snap305_massmetal/continuity/snap305.galaxy'+'{0:03}'.format(gal)+'*.h5'
#dir_model = '/ufrc/narayanan/s.lower/simSEDs/simbam25n512_newfof/snap305_massmetal/dirichlet/snap305.galaxy'+'{0:03}'.format(gal)+'*.h5'


#observed = '/ufrc/narayanan/s.lower/pd_runs/simba_m25n512/snap305_boxtest/snap305/snap305.galaxy'+'{0:03}'.format(gal)+'.rtout.sed'
#obs_spec, obs_wav = load_obs(observed)



dir_file = '/Volumes/ufrc/narayanan/s.lower/simSEDs/simbam25n512_newfof/snap305_ultra_mist/dirichlet/snap305.galaxy'+"{:03d}".format(gal)+'_*.h5'

res_dir, res_cont = 0, 0

for file in glob(dir_file):
    print(file)
    res_dir, obs_dir, mod_dir = pread.results_from(file)

def load_sps(**extras):

    sps = FastStepBasis(compute_vega_mags=False, zcontinuous=1, **extras)
    return sps

sps = load_sps()

dir_best = get_best(res_dir)[1]
phot_wavelengths = [x.wave_mean for x in obs_dir['filters']]
spec_wavelengths = sps.wavelengths

dir_spec,dir_phot, dir_massfrac = mod_dir.mean_model(dir_best, obs_dir, sps=sps)



np.savez('/ufrc/narayanan/s.lower/SEDs/SED_galaxy'+str(gal)+'_dir.npz', wav_phot=phot_wavelengths, wav_spec=spec_wavelengths, phot=dir_phot, spec=dir_spec)

'''for file in glob(tau_model):
    res_t, obs_t, mod_t = pread.results_from(file)
tau_sps = pread.get_sps(res_t)

for file in glob(ultra):
    res_u, obs_u, mod_u = pread.results_from(file)
ultra_sps = pread.get_sps(res_u)

for file in glob(cont_model):
    res_c, obs_c, mod_c = pread.results_from(file)
cont_sps = pread.get_sps(res_c)

for file in glob(dir_model):
    res_d, obs_d, mod_d = pread.results_from(file)
dir_sps = pread.get_sps(res_d)


tau_best = get_best(res_t)[1]
ultra_best = get_best(res_u)[1]
cont_best = get_best(res_c)[1]
dir_best = get_best(res_d)[1]

phot_wavelengths = [x.wave_mean for x in obs_t['filters']]
spec_wavelengths = tau_sps.wavelengths

tau_spec, tau_phot, tau_massfrac = mod_t.mean_model(tau_best, obs_t, sps=tau_sps)
ultra_spec, ultra_phot, ultra_massfrac = mod_u.mean_model(ultra_best, obs_u, sps=ultra_sps)
cont_spec, cont_phot, cont_massfrac = mod_c.mean_model(cont_best, obs_c, sps=cont_sps)
dir_spec, dir_phot, dir_massfrac = mod_d.mean_model(dir_best, obs_d, sps=dir_sps)


plt.figure(figsize=(10, 8))
plt.tick_params(axis='both', which='major', labelsize=15)
plt.tick_params(axis='both', which='minor')

plt.scatter(phot_wavelengths, obs_u['maggies'], color='black', s=150, marker='+', zorder=10, label='Observed Phot')
plt.plot(obs_wave, obs_spec, color='gray', lw=1, label='True Spec')

plt.plot(spec_wavelengths*(1.+0.01), ultra_spec, color='darkorange' , ls='--', lw=2, label='Ultra')

#plt.plot(spec_wavelengths, tau_spec, color='midnightblue' , lw=2, label=r'$\tau$')

#plt.plot(spec_wavelengths, cont_spec, color='crimson' , lw=2, label='Cont+M*-Z')

#plt.plot(spec_wavelengths, dir_spec, color='orange' , lw=2, label='Dirichlet+M*-Z')

plt.annotate('Galaxy '+str(gal)+'\nM* ='+"{:.3e}".format(Decimal(str(tau_data.loc[['{0:03}'.format(gal)]]['Intrinsic Stellar Mass'][0] / 1.989e33)))+' M$_{\odot}$',xy=(1e1, 1e8), fontsize=15)


plt.loglog()
plt.ylim([1e3, 1e11])
#plt.xlim([1e2, 1e8])
plt.legend(loc='lower right', fontsize=15)
plt.ylabel('Flux [maggies]', fontsize=23)
plt.xlabel('Wavelength [$\AA$]', fontsize=23)

plt.savefig('/ufrc/narayanan/s.lower/SEDs/ultra/SED_'+str(gal)+'.png', fpi=300, bbox_inches='tight')'''
